<div class="container mt-4">
  <div class="row">
    <div class="col-md-12">
      <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Job #<%= @job.id %> - <%= @job.repository.name %></h2>
        <div>
          <%= link_to "All Jobs", jobs_path, class: "btn btn-secondary" %>
          <%= link_to "Repository", @job.repository, class: "btn btn-secondary" %>
        </div>
      </div>
      
      <% if @job.job_type == 'migration' && (@job.running? || @job.pending?) %>
        <%= render 'phase_progress', job: @job %>
      <% end %>
      
      <% if @job.running? && @job.job_type == 'migration' %>
        <div class="mb-4">
          <%= render 'progress_monitor', job: @job %>
        </div>
      <% end %>
      
      <% if @job.job_type == 'migration' %>
        <!-- 마이그레이션 요약 정보 (모든 상태에서 표시) -->
        <div class="card mb-4">
          <div class="card-header">
            <h5 class="mb-0">Migration Summary</h5>
          </div>
          <div class="card-body">
            <div class="row">
              <div class="col-md-6">
                <dl class="row">
                  <dt class="col-sm-5">Status:</dt>
                  <dd class="col-sm-7">
                    <span class="badge bg-<%= job_status_color(@job.status) %> fs-6">
                      <%= @job.status.capitalize %>
                    </span>
                  </dd>
                  <dt class="col-sm-5">Duration:</dt>
                  <dd class="col-sm-7"><%= @job.formatted_duration %></dd>
                  <dt class="col-sm-5">Total Revisions:</dt>
                  <dd class="col-sm-7"><span data-total-revisions><%= @job.total_revisions || 'Calculating...' %></span></dd>
                  <dt class="col-sm-5">Processed:</dt>
                  <dd class="col-sm-7"><span data-processed><%= @job.current_revision || 0 %> / <%= @job.total_revisions || '?' %></span></dd>
                </dl>
              </div>
              <div class="col-md-6">
                <dl class="row">
                  <dt class="col-sm-5">Started:</dt>
                  <dd class="col-sm-7"><%= @job.started_at&.strftime("%Y-%m-%d %H:%M") || "-" %></dd>
                  <dt class="col-sm-5">Completed:</dt>
                  <dd class="col-sm-7"><%= @job.completed_at&.strftime("%Y-%m-%d %H:%M") || "-" %></dd>
                  <% if @job.result_url.present? %>
                    <dt class="col-sm-5">Result:</dt>
                    <dd class="col-sm-7">
                      <%= link_to "View in GitLab", @job.result_url, 
                          target: "_blank", rel: "noopener", class: "btn btn-sm btn-success" %>
                    </dd>
                  <% end %>
                </dl>
              </div>
            </div>
          </div>
        </div>
      <% end %>
      
      <div class="row">
        <div class="col-md-8">
          <% unless @job.job_type == 'migration' %>
            <div class="card mb-4">
              <div class="card-header">
                <h5 class="mb-0">Job Status</h5>
              </div>
              <div class="card-body">
                <dl class="row">
                  <dt class="col-sm-3">Status:</dt>
                  <dd class="col-sm-9">
                    <span class="badge bg-<%= job_status_color(@job.status) %> fs-6">
                      <%= @job.status.capitalize %>
                    </span>
                  </dd>
                  
                  <dt class="col-sm-3">Type:</dt>
                  <dd class="col-sm-9"><%= @job.job_type.humanize %></dd>
                  
                  <dt class="col-sm-3">Started:</dt>
                  <dd class="col-sm-9">
                    <%= @job.started_at ? @job.started_at.strftime("%Y-%m-%d %H:%M:%S") : "-" %>
                  </dd>
                  
                  <dt class="col-sm-3">Completed:</dt>
                  <dd class="col-sm-9">
                    <%= @job.completed_at ? @job.completed_at.strftime("%Y-%m-%d %H:%M:%S") : "-" %>
                  </dd>
                  
                  <dt class="col-sm-3">Duration:</dt>
                  <dd class="col-sm-9"><%= @job.formatted_duration %></dd>
                  
                  <% if @job.phase.present? && @job.phase != 'pending' %>
                    <dt class="col-sm-3">Phase:</dt>
                    <dd class="col-sm-9">
                      <span class="badge bg-info"><%= Job::PHASES[@job.phase.to_sym] || @job.phase.humanize %></span>
                    </dd>
                  <% end %>
                  
                  <% if @job.result_url.present? %>
                    <dt class="col-sm-3">Result:</dt>
                    <dd class="col-sm-9">
                      <%= link_to "View in GitLab", @job.result_url, 
                          target: "_blank", rel: "noopener", class: "btn btn-success" %>
                    </dd>
                  <% end %>
                </dl>
                
                <% if @job.active? && @job.job_type == 'incremental_sync' %>
                  <div class="progress mt-3" style="height: 30px;">
                    <div class="progress-bar progress-bar-striped progress-bar-animated" 
                         role="progressbar" 
                         style="width: <%= @job.progress_percentage %>%"
                         aria-valuenow="<%= @job.progress_percentage %>" 
                         aria-valuemin="0" 
                         aria-valuemax="100">
                      <%= @job.progress_percentage %>%
                    </div>
                  </div>
                  
                  <div class="mt-2 text-center">
                    <small class="text-muted">
                      Syncing changes...
                    </small>
                  </div>
                <% end %>
              </div>
            </div>
          <% end %>
          
          <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
              <h5 class="mb-0">Logs</h5>
              <div>
                <%= link_to "Download Logs", logs_job_path(@job, format: :text), 
                    class: "btn btn-sm btn-outline-secondary" %>
                <% if @job.active? %>
                  <button class="btn btn-sm btn-outline-primary" id="refresh-logs">
                    Auto-refresh: <span id="refresh-status">ON</span>
                  </button>
                <% end %>
              </div>
            </div>
            <div class="card-body">
              <ul class="nav nav-tabs" role="tablist">
                <li class="nav-item" role="presentation">
                  <button class="nav-link active" id="output-tab" data-bs-toggle="tab" 
                          data-bs-target="#output" type="button" role="tab">
                    Output Log
                  </button>
                </li>
                <li class="nav-item" role="presentation">
                  <button class="nav-link" id="error-tab" data-bs-toggle="tab" 
                          data-bs-target="#error" type="button" role="tab">
                    Error Log
                    <% if @job.error_log.present? %>
                      <span class="badge bg-danger">!</span>
                    <% end %>
                  </button>
                </li>
              </ul>
              
              <div class="tab-content">
                <div class="tab-pane fade show active" id="output" role="tabpanel">
                  <pre id="output-log" class="bg-dark text-light p-3 mt-3" style="height: 400px; overflow-y: auto; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word; font-size: 0.875rem;">
<%= @job.output_log || "No output yet..." %>
                  </pre>
                </div>
                <div class="tab-pane fade" id="error" role="tabpanel">
                  <pre id="error-log" class="bg-dark text-light p-3 mt-3" style="height: 400px; overflow-y: auto; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word; font-size: 0.875rem;">
<%= @job.error_log || "No errors" %>
                  </pre>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <div class="col-md-4">
          <div class="card mb-4">
            <div class="card-header">
              <h5 class="mb-0">Actions</h5>
            </div>
            <div class="card-body">
              <% if @job.active? %>
                <%= link_to "Cancel Job", cancel_job_path(@job), 
                    data: { 
                      "turbo-method": :post,
                      "turbo-confirm": "Are you sure you want to cancel this job?"
                    },
                    class: "btn btn-danger w-100" %>
              <% elsif @job.failed? || @job.cancelled? %>
                <% if @job.can_resume? %>
                  <%= link_to "Resume Migration", resume_job_path(@job), 
                      data: { 
                        "turbo-method": :post,
                        "turbo-confirm": "Resume migration from last checkpoint?"
                      },
                      class: "btn btn-success w-100 mb-2" %>
                  <div class="alert alert-info">
                    <small>
                      <i class="bi bi-info-circle"></i>
                      이 작업은 재개 가능합니다.<br>
                      <% if @job.phase.present? %>
                        마지막 체크포인트: <%= @job.phase.humanize %><br>
                      <% end %>
                      시도 횟수: <%= @job.retry_count %>회
                    </small>
                  </div>
                <% elsif @job.repository_config_changed? %>
                  <div class="alert alert-warning mb-2">
                    <h6><i class="bi bi-exclamation-triangle"></i> Repository 설정 변경됨</h6>
                    <small>
                      Authors 또는 Layout 설정이 변경되어 재개할 수 없습니다.<br>
                      변경된 설정으로 새로 시작하려면 Retry를 사용하세요.
                    </small>
                  </div>
                  <%= link_to "Retry (Start Over)", retry_job_path(@job), 
                      data: { 
                        "turbo-method": :post,
                        "turbo-confirm": "Repository 설정이 변경되었습니다. 처음부터 다시 시작하시겠습니까?"
                      },
                      class: "btn btn-warning w-100" %>
                <% elsif @job.error_log&.include?('GitLab token validation failed') || 
                        @job.error_log&.include?('GitLab authentication failed') %>
                  <div class="alert alert-danger">
                    <h6><i class="bi bi-exclamation-triangle"></i> 인증 오류</h6>
                    <small>
                      GitLab Personal Access Token이 유효하지 않습니다.<br>
                      토큰이 만료되었거나 권한이 부족할 수 있습니다.<br>
                      <strong>필요한 권한:</strong> api, read_repository, write_repository
                    </small>
                  </div>
                  <%= link_to "Re-login with Valid Token", logout_path, 
                      data: { "turbo-method": :delete },
                      class: "btn btn-warning w-100 mb-2" %>
                <% else %>
                  <%= link_to "Retry (Start Over)", retry_job_path(@job), 
                      data: { 
                        "turbo-method": :post,
                        "turbo-confirm": "처음부터 다시 시작하시겠습니까?"
                      },
                      class: "btn btn-warning w-100 mb-2" %>
                <% end %>
                
                <%= link_to "Delete Job", job_path(@job),
                    data: { 
                      "turbo-method": :delete,
                      "turbo-confirm": "정말로 이 Job을 삭제하시겠습니까? 이 작업은 되돌릴 수 없습니다."
                    },
                    class: "btn btn-outline-danger w-100" %>
              <% elsif @job.completed? %>
                <%= link_to "Run Another Migration", new_repository_job_path(@job.repository), 
                    class: "btn btn-primary w-100" %>
              <% end %>
            </div>
          </div>
          
          <div class="card">
            <div class="card-header">
              <h5 class="mb-0">Job Parameters</h5>
            </div>
            <div class="card-body">
              <% params = @job.parsed_parameters %>
              <dl class="row small">
                <% params.each do |key, value| %>
                  <dt class="col-sm-6"><%= key.humanize %>:</dt>
                  <dd class="col-sm-6"><%= value %></dd>
                <% end %>
              </dl>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<% if @job.active? %>
  <script>
    let refreshInterval;
    let refreshEnabled = true;
    let autoScroll = true;
    let userScrolling = false;
    
    // Auto-scroll 관리
    const outputLog = document.getElementById('output-log');
    const errorLog = document.getElementById('error-log');
    
    function isAtBottom(element) {
      return element.scrollHeight - element.scrollTop <= element.clientHeight + 50;
    }
    
    function scrollToBottom(element) {
      if (autoScroll && !userScrolling) {
        element.scrollTop = element.scrollHeight;
      }
    }
    
    // 사용자 스크롤 감지
    if (outputLog) {
      outputLog.addEventListener('scroll', function() {
        userScrolling = true;
        // 맨 아래에 있으면 auto-scroll 재활성화
        if (isAtBottom(outputLog)) {
          autoScroll = true;
          userScrolling = false;
        } else {
          autoScroll = false;
        }
        updateAutoScrollButton();
      });
    }
    
    if (errorLog) {
      errorLog.addEventListener('scroll', function() {
        userScrolling = true;
        if (isAtBottom(errorLog)) {
          autoScroll = true;
          userScrolling = false;
        } else {
          autoScroll = false;
        }
        updateAutoScrollButton();
      });
    }
    
    function updateAutoScrollButton() {
      const btn = document.getElementById('auto-scroll-btn');
      if (btn) {
        btn.textContent = autoScroll ? 'Auto-scroll: ON' : 'Auto-scroll: OFF';
        btn.className = autoScroll ? 'btn btn-sm btn-success' : 'btn btn-sm btn-secondary';
      }
    }
    
    function updateJobStatus() {
      if (!refreshEnabled) return;
      
      fetch('<%= job_path(@job, format: :json) %>')
        .then(response => response.json())
        .then(data => {
          // Update progress bar
          const progressBar = document.querySelector('.progress-bar');
          if (progressBar) {
            progressBar.style.width = data.progress + '%';
            progressBar.setAttribute('aria-valuenow', data.progress);
            progressBar.textContent = data.progress + '%';
          }
          
          // Update 진행 상태 지표
          const revisionsElement = document.querySelector('[data-revisions]');
          if (revisionsElement) {
            revisionsElement.textContent = data.current_revision + ' / ' + data.total_revisions;
          }
          
          // Update Processed
          const processedElement = document.querySelector('[data-processed]');
          if (processedElement) {
            processedElement.textContent = data.current_revision + ' / ' + data.total_revisions;
          }
          
          // Update ETA
          const etaElement = document.querySelector('[data-eta]');
          if (etaElement && data.formatted_eta) {
            etaElement.textContent = data.formatted_eta;
          }
          
          // Update processing speed
          const speedElement = document.querySelector('[data-speed]');
          if (speedElement && data.processing_speed) {
            speedElement.textContent = data.processing_speed.toFixed(2) + ' 리비전/초';
          }
          
          // Update duration
          const durationElement = document.querySelector('[data-duration]');
          if (durationElement && data.duration) {
            durationElement.textContent = data.duration;
          }
          
          // Update logs - 전체 로그 로드
          fetch('<%= logs_job_path(@job, format: :json) %>')
            .then(response => response.json())
            .then(logData => {
              if (outputLog && logData.output_log) {
                const wasAtBottom = isAtBottom(outputLog);
                outputLog.textContent = logData.output_log;
                if (wasAtBottom || autoScroll) {
                  scrollToBottom(outputLog);
                }
              }
              
              if (errorLog && logData.error_log) {
                const wasAtBottom = isAtBottom(errorLog);
                errorLog.textContent = logData.error_log;
                if (wasAtBottom || autoScroll) {
                  scrollToBottom(errorLog);
                }
              }
            });
          
          // Update Migration Summary progress bar
          const migrationProgressBar = document.querySelector('.migration-progress-bar');
          if (migrationProgressBar) {
            migrationProgressBar.style.width = data.progress + '%';
            migrationProgressBar.setAttribute('aria-valuenow', data.progress);
            migrationProgressBar.textContent = data.progress + '%';
          }
          
          // Update progress text
          const progressText = document.querySelector('[data-progress-text]');
          if (progressText) {
            progressText.textContent = data.progress + '%';
          }
          
          // Reload page if job finished
          if (data.status !== 'pending' && data.status !== 'running') {
            clearInterval(refreshInterval);
            location.reload();
          }
        });
    }
    
    // Toggle auto-refresh
    const refreshBtn = document.getElementById('refresh-logs');
    if (refreshBtn) {
      refreshBtn.addEventListener('click', function() {
        refreshEnabled = !refreshEnabled;
        document.getElementById('refresh-status').textContent = refreshEnabled ? 'ON' : 'OFF';
      });
    }
    
    // Toggle auto-scroll
    document.addEventListener('DOMContentLoaded', function() {
      // Auto-scroll 버튼 추가
      const logHeader = document.querySelector('.card-header:has(h5:contains("Logs"))');
      if (logHeader) {
        const btnGroup = logHeader.querySelector('div');
        if (btnGroup) {
          const autoScrollBtn = document.createElement('button');
          autoScrollBtn.id = 'auto-scroll-btn';
          autoScrollBtn.className = 'btn btn-sm btn-success ms-2';
          autoScrollBtn.textContent = 'Auto-scroll: ON';
          autoScrollBtn.addEventListener('click', function() {
            autoScroll = !autoScroll;
            userScrolling = false;
            updateAutoScrollButton();
            if (autoScroll) {
              scrollToBottom(outputLog);
              scrollToBottom(errorLog);
            }
          });
          btnGroup.appendChild(autoScrollBtn);
        }
      }
    });
    
    // Start auto-refresh
    refreshInterval = setInterval(updateJobStatus, 3000);
    
    // 초기 로드 시 맨 아래로 스크롤
    setTimeout(() => {
      scrollToBottom(outputLog);
      scrollToBottom(errorLog);
    }, 100);
  </script>
<% end %>

<%# Helper method for status colors %>
<% def job_status_color(status)
  case status
  when 'pending' then 'secondary'
  when 'running' then 'primary'
  when 'completed' then 'success'
  when 'failed' then 'danger'
  when 'cancelled' then 'warning'
  else 'secondary'
  end
end %>